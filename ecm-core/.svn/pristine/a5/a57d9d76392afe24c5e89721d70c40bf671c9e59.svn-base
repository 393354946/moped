package network.external;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import messages.PWMMessage;

import ecm.Ecm;

public class CarDriver implements Runnable {
	private int pwmEcuId;
	private Ecm ecm;
//	private String oldSpeedStr;
//	private String oldSteerStr;
	private byte oldSpeed;
	private byte oldSteer;
	
	private static final int PORT = 9000;
	private List<Socket> mList = new ArrayList<Socket>();
	private ExecutorService mExecutorService = null; // thread pool

	public CarDriver(int pwmEcuId) {
		this.pwmEcuId = pwmEcuId;
//		oldSpeedStr = "2457";
//		oldSteerStr = "2457";
		oldSpeed = 0;
		oldSteer = 0;
	}

	public Ecm getEcm() {
		return ecm;
	}

	public void setEcm(Ecm ecm) {
		this.ecm = ecm;
	}

	@Override
	public void run() {
		ServerSocket server;
		
		try {
			server = new ServerSocket(PORT);
			mExecutorService = Executors.newCachedThreadPool(); // create a
																// thread
			// pool
			System.out.println("server start ...");
			Socket client = null;
			while (true) {
				client = server.accept();
				mList.add(client);
				mExecutorService.execute(new Service(client)); // start a new
																// thread
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
	
	class Service implements Runnable {
		private Socket socket;
		private BufferedReader in = null;
		private String msg = "";

		// private char[] data;
		public Service(Socket socket) {
			this.socket = socket;
			try {
				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()), 5);
				msg = "user" + this.socket.getInetAddress() + "come toal:"
						+ mList.size();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
		
//		private String interpretWirelessino(String message) {
//			String result = "";
//			String pwmStr = "";
//			String tag = message.substring(0, 1);
//			String strValue = message.substring(1);
//			int value = Integer.parseInt(strValue);
//			int pwm = 0;
//			
//			if (tag.equals("V")) {
//				pwm = (int) (Math.round(100 + (0.55556 * (value + 100) * 0.9)) * 16.38);
//				pwmStr = pwm + "";
//				oldSpeedStr = pwmStr;
//				result = pwmStr + oldSteerStr;
//			} else {	
//				pwm = (int) (Math.round(100 + (0.55556 * (value + 100) * 0.9)) * 16.38);
//				pwmStr = pwm + "";
//				oldSteerStr = pwmStr;
//				result = oldSpeedStr + pwmStr;
//			}
//			return result;
//		}
		
		private byte[] interpretWirelessino(String message) {
			byte[] res = new byte[2];
			String tag = message.substring(0, 1);
			String strValue = message.substring(1);
			byte value = Byte.parseByte(strValue);
			int pwm = 0;
			
			if (tag.equals("V")) {
				oldSpeed = value;
				res[0] = oldSpeed;
				res[1] = oldSteer;
				
			} else {	
//				pwm = (int) (Math.round(100 + (0.55556 * (value + 100) * 0.9)) * 16.38);
				oldSteer = value;
				res[0] = oldSpeed;
				res[1] = oldSteer;
			}
			
			return res;
		}

		public void run() {
			try {
				while (true) {
					// in.mark(0);
					if ((msg = in.readLine()) != null) {
						// if(in.read(cbuf)!=-1) {
						// clear buffer

						in.mark(0);
						in.reset();
						if (msg.equals("exit")) {
							System.out.println("ssssssss");
							mList.remove(socket);
							in.close();
							msg = "user:" + socket.getInetAddress()
									+ "exit total:" + mList.size();
							socket.close();
							break;
						} else {
							// CarDriver.interpretWirelessino(msg);
//							System.out.println(msg);
							byte[] data = interpretWirelessino(msg);
//							System.out.println(packageStr);
							// hardcode that makes PWM data to ECU 2
							PWMMessage pwmMessage = new PWMMessage(pwmEcuId, data);
							ecm.process(pwmMessage);
						}
					}

					Thread.sleep(10);
				}
			} catch (Exception e) {
				System.out.println("The connection between Cellphone and ECM is terminated");
			}
		}
	}
	
}
