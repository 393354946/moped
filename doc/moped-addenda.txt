I added a 4x7 LED display (7 segments, and actually a period too), which
uses I2C. SCU has code I2C, and otherwise uses this for the ADC. It's
probably possible to put both ADC and the display on the same I2C pins,
after setting a different device id on the display.

The MPU9150 (accelerometer) unit also has a magnetometer, so one can
get the orientation with some additional code on the SCU.

I added code for reading the value of the GPIO 2 pin (pin 3). This can be
changed from 1 to 0 with a simple switch which grounds the pin. The code
is not readable from Java yet.

New plugin: StarAndGo, and others

Sound: connected a small loudspeaker with 3.5mm audio and USB power (to
charge internal battery) to TCU. But taking power from the TCU is not
a good idea. Charge the speaker separately instead.
The small loudspeakers I bought at Clas Ohlson run without charging
for at least 12 hours (at least when not emitting sound). 5 minutes of
charging (whether turned on or not) gives one hour of use.

Sending data from VCU to SCU (in the same way as SCU to VCU already works)
is in progress, but not ready yet.



Don't force the front wheels to change steering by hand. Doing so
generates a current, which may be high enough to damage circuits.

The speed of the car: 20m in between 10 and 50 s.
The lowest value for the speed port that results in movement is 7.
Smallest circle has outer diameter 153 cm. At lowest speed, it is
circumvented in 17s.

When "ready? 0 xxx", xxx being some number, appears on VCU/SCU serial
output, it means that the Can reception works, but PIRTE is not
running.

ACT LED blinking (the first LED on the Raspberry Pi board)
 The LED blinks in a pattern that is described by a sequence of
 hexadecimal digits, 1-f, representing the time the LED is on or off,
 where f is about one second. The first nonzero digit represents the
 LED being on.

 The normal state is 121f; that is, a rapid on-off-on followed by off for
 one second.

 A plugin can set the pattern by pretending to write to ordinary LED
 number -1.

 When a plugin started installing but failed, it changes to 21f1; that is,
 a rapid off-on-off followed by on for one second.
 In this state, an installation can be retried, and running plugins still
 run.

 When an installation succeeds, the pattern will revert to 121f.

 When the virtual machine crashes (which means that plugins stop and nothing
 can be installed), the pattern is 121218.

 When the virtual machine detects a condition that makes it exit, for example
 out of memory, the pattern is 4141. Functionally, this state is equivalent to
 the one above.

 The node may crash in such a way that the blinking stops - then the LED will
 be either constantly on or off. It can also crash in such a way that the
 LED flickers.

 If the pattern is 55, it means that the Java virtual machine never started.

Port 22 is for reading position information, sent to the VCU from the TCU
when an external image processing server is running.
The value is of type 'long', in the form
(vehiclePositionX << 48)
+ (vehiclePositionY << 32)
+ (vehicleOrientation << 24)
+ (vehiclePositionQualityFactor << 16)
+ vehiclePositionAge;
X and Y are in cm, orientation is from 0 to 255 in units of 360/256 degrees.
quality is between 0 and 100, 100 being perfect


When setting up the system, change new-server/settings.properties so
it points out the MOPED directory.
Also, change ecm-linux/settings.properties so the server will be found,
and, after copying it to the TCU, set the VIN to something unique
(especially relevant if you have several cars).

Hint: if a plugin drives the motor but doesn't set it to zero often, it
may not start when the ESC is turned on. Then using the remote control and
sliding the speed up and down a little gets it going.

Instead of restarting SCU and reinstall UltraSonicReader, just disconnect
its CAN cable. When putting it back, it will continue working. This is
currently a useful thing to do so that the messages from the SCU don't
get in the way of a plugin installation.

Maybe already there:
 start.elf bootcode.bin kernel.img

 A card may be mountable and have these files with correct content, but
 still refuse to boot.

 Conversely, a card may be unrecognized by a computer, but fully working
 as TCU.

 SD cards may get worn and stop functioning. It could be that they still
 work in a computer or SD card reader, but not in the Raspberry.
 Once, one of the small plastic ridges between the contacts broke. I could
 fix that by simply removing most of the ridge. It may help to put a folded
 piece of paper under the SD card.

If you intend to let the car run without cables attached, don't boot it
with an ethernet cable attached (and then removing it), since the connection
to MQTT, and maybe also the server, will be made using the cable.

plugins/new-plugin.sh

In the front wheels, the reflection reader is fastened with a piece of
plastic-embedded metal wire which can get in the way of the light. Pull
it into place if so. Check that the VCU reacts for each of the five
strips.

About j2me and missing things (split, maths) and the string+double bug.

InterruptedException in plugins

With Python:
>>> for y in [(x["appId"],x["name"],x["installationState"],x["applicationState"]) for x in json.loads(s.listInstalledApps())["result"] if x["applicationState"] < "060"]: print y;
... 
(u'211', u'Comm1', u'installed', u'030-compiled')
(u'222', u'VCUfromSCU', u'installed', u'030-compiled')
(u'220', u'SCUtoVCU', u'installed', u'030-compiled')
(u'244', u'LEDLighter2', u'installed', u'030-compiled')
(u'254', u'SpeedBrake', u'installed', u'030-compiled')
(u'321', u'UltraSonicReader', u'installed', u'030-compiled')
(u'327', u'LEDLighter', u'installed', u'030-compiled')
(u'343', u'Slow', u'installed', u'030-compiled')
(u'348', u'UltraSonicReaderSquare', u'installed', u'030-compiled')
(u'351', u'Position', u'installed', u'030-compiled')
(u'360', u'Square', u'installed', u'030-compiled')
(u'348', u'UltraSonicReaderSquare', u'installed', u'030-compiled')
(u'375', u'SemiAutomaticReverseParking', u'installed', u'030-compiled')
(u'376', u'Circle', u'installed', u'030-compiled')
(u'386', u'CirclePos', u'installed', u'030-compiled')
(u'387', u'FWPub', u'installed', u'030-compiled')
(u'394', u'AllVCU', u'installed', u'030-compiled')

Configuration files: settings.properties
in new-server, ecm-linux, simulator

tvservice -o on TCU for lowering battery use

Making partition bootable
use sudo fdisk /dev/sdg
and the commands p, a and w


When writing a plugin, don't forget super(args) in the constructor.

New debugging idea: connect the serial output from the SCU to the UART of
the TCU, and read from its /dev/ttyAMA0.
x
Connect UART pins on SCU to those on TCU (RX to TX, etc.)
x
Stopping /etc/agetty on TCU:
sudo systemctl stop serial-getty@ttyAMA0.service
sudo bash
root@raspberrypi:/home/pi# cat < /dev/ttyAMA0
x
sudo bash
systemctl stop serial-getty@ttyAMA0.service
cat < /dev/ttyAMA0
x
/dev/ttyAMA0 is already at the right speed etc.
x
It works fine.
x
But it seems to take a bit of cpu from the other things running.

