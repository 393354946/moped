* Speeding up building server

Extract all maven repository files (in ~/.m2) to ~/jar-files
Then run original-server:
Delete our own jar files: server, ecm*, simulator
and there are three log4j, where only one is needed
java -cp ~/jar-files/'*':target/server.jar service.PluginWebServicePublisher
Remove the shade thing in pom.xml and the building takes half the time.
add this to how-to-build.txt

mvn clean package -Dmaven.test.skip=true

* Adding the local network on TCU
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf


============================================================

indoor positioning system

with the camera and opencv

on TCU

TODO: copy text from LOG-camera

============================================================

MQTT

The VCU/SCU writes to a port, which sends the data to TCU, which sends it
out (publishes).

The address of the MQTT server is set in ecm-linux/.../Main.java and
simulator/.../CarFactory.java.

A template is also defined there, which consists of a JSON structure. It
is filled in with the key and value of what is written to the part in
the form "key|value".

============================================================

VCU and SCU have numbers: 2 = VCU and 3 = SCU. When relevant, 1 = TCU.

============================================================

Tips and tricks

If only the SCU (or VCU) needs to be restarted (because it got stuck,
or because its SD card needs to be updated), pull its power cable and
put it in again.

When doing file operations on the TCU and then restarting the car, the
operations sometimes turn out to be undone. I think it's important
to do "sync" before restarting.

The dependencies within the modules are far from understood, so it's
best to always (yes, always) do a 'clean' operation before rebuilding.

============================================================

If squawk is rebuilt, and a new kernel.img put on the VCU/SCU, all plugins
for that node need to be rebuilt, since their "hash codes" need to
coincide.

============================================================

When debugging the code on the VCU/SCU, printouts are normally not harmful,
but if they are performed very fast (deep inside the runtime system),
or in a sensitive place where they themselves may cause recursion
(memory allocation, symbol lookup), they may either hang the VCU/SCU
completely or make it behave erratically.

At least for the communication between TCU and SCU/VCU, timing cannot
be changed completely arbitrarily, because there is no flow control between
PIRTE and the code transferring data from the CAN bus.

In Java, printing is done with VM.print or VM.println, whereas System.out
is ignored on autosar. The VM functions work on hosted platforms too,
though. So always use the VM functions in plugins.

============================================================

Time taken to get the car started:

0  boot
33 TCU gets a wifi address (the dongle starts blinking in blue)
34 ECM starts
56 ECM connects to the server
68 SCU or VCU receives the first plugin (if the TCU has one)
78 (if the plugin is 2400 bytes) the first plugin starts running

============================================================

Useful commands on TCU:

gpio readall (displays the layout of the pins)
candump -td can0 (shows the CAN traffic)
